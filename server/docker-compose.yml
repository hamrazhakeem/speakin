version: '3.8'

services:
  api_gateway:
    container_name: api_gateway
    build:
      context: ./api_gateway
    volumes:
      - ./api_gateway:/app
    ports:
      - "8080:8080" 
    depends_on:
      user_service:
        condition: service_started
      payment_service:
        condition: service_started
      session_service:
        condition: service_started
      message_service:
        condition: service_started
    networks:
      - microservice_network

  user_service:
    container_name: user_service
    build:
      context: ./user_service
    volumes:
      - ./user_service:/app
    ports:
      - "8000:8000"
      - "50051:50051"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      user_service_db:
        condition: service_healthy
    networks:
      - microservice_network

  payment_service:
    container_name: payment_service
    build:
      context: ./payment_service
    volumes:
      - ./payment_service:/app
    ports:
      - "8001:8001"
      - "50052:50052"
    depends_on:
      payment_service_db:
        condition: service_healthy
    networks:
      - microservice_network

  session_service:
    container_name: session_service
    build:
      context: ./session_service
    volumes:
      - ./session_service:/app
    ports:
      - "8002:8002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      session_service_db:
        condition: service_healthy
    networks:
      - microservice_network

  message_service:
    container_name: message_service
    build:
      context: ./message_service
    volumes:
      - ./message_service:/app
    ports:
      - "8003:8003"
    depends_on:
      redis:
        condition: service_healthy
      message_service_db:
        condition: service_healthy
    networks:
      - microservice_network

  user_service_db:
    image: postgres:13
    container_name: user_service_db
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - microservice_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment_service_db:
    image: postgres:13
    container_name: payment_service_db
    environment:
      POSTGRES_DB: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${PAYMENT_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASSWORD}
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    networks:
      - microservice_network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAYMENT_DB_USER} -d ${PAYMENT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  session_service_db:
    image: postgres:13
    container_name: session_service_db
    environment:
      POSTGRES_DB: ${SESSION_DB_NAME}
      POSTGRES_USER: ${SESSION_DB_USER}
      POSTGRES_PASSWORD: ${SESSION_DB_PASSWORD}
    volumes:
      - session_db_data:/var/lib/postgresql/data
    networks:
      - microservice_network
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SESSION_DB_USER} -d ${SESSION_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  message_service_db:
    image: postgres:13
    container_name: message_service_db
    environment:
      POSTGRES_DB: ${MESSAGE_DB_NAME}
      POSTGRES_USER: ${MESSAGE_DB_USER}
      POSTGRES_PASSWORD: ${MESSAGE_DB_PASSWORD}
    volumes:
      - message_db_data:/var/lib/postgresql/data
    networks:
      - microservice_network
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MESSAGE_DB_USER} -d ${MESSAGE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  stripe_cli:
    image: stripe/stripe-cli:latest
    container_name: stripe_cli
    command: listen --forward-to http://host.docker.internal:8080/api/webhook/
    networks:
      - microservice_network
    depends_on:
      api_gateway:
        condition: service_started
    restart: on-failure:5 
    # volumes:
    #   - ./payment_service:/app
    env_file:
      - .env 

  user_service_worker:
    container_name: user_service_worker
    build:
      context: ./user_service
    command: celery -A user_service worker --loglevel=info
    volumes:
      - ./user_service:/app
    depends_on:
      user_service:
        condition: service_started
    networks:
      - microservice_network

  session_service_worker:
    container_name: session_service_worker
    build:
      context: ./session_service
    command: celery -A session_service worker --loglevel=info
    volumes:
      - ./session_service:/app
    depends_on:
      session_service:
        condition: service_started
    networks:
      - microservice_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservice_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - microservice_network
    depends_on:
      - api_gateway
      - user_service
      - payment_service
      - session_service
      - message_service
      - cadvisor

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - microservice_network
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - microservice_network

volumes:
  user_db_data:
  payment_db_data:
  session_db_data:
  message_db_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  microservice_network:
    driver: bridge